


{{#repeat 4}}

<details class="comp-reveal">
  <summary class="comp-reveal-title">Images</summary>
  <div class="comp-reveal-content">

    <div class="comp-form-row-group">
      <div class="c-form-row {{#if errors.images.[index].file}}c-form-row--error{{/if}}">
        <label for="images[{{@index}}][file]" class="c-form-title">Image File {{@index}}</label>
        <input type="file" id="images[{{@index}}][file]" name="images[{{@index}}][file]"
          class="c-form-texty {{#if errors.images.[index].file}}c-form-texty--error{{/if}}"
          value="{{state.images.[index].file}}">
        <div class="preview">
          <p>No files currently selected for upload</p>
        </div>
      </div>

      <div class="c-form-row {{#if errors.images.[index].alt}}c-form-row--error{{/if}}">
        <label for="images[{{@index}}][alt]" class="c-form-title">Image Alt {{@index}}</label>
        <input type="text" id="images[{{@index}}][alt]" name="images[{{@index}}][alt]"
          class="c-form-texty {{#if errors.images.[index].alt}}c-form-texty--error{{/if}}"
          value="{{state.images.[index].alt}}">
      </div>
    </div>

  </div>
</details>

{{/repeat}}

<script>
  const input = document.querySelector('input[type="file"]')
  const preview = document.querySelector('.preview');

  input.addEventListener('change', updateImageDisplay);

  function updateImageDisplay() {
    while (preview.firstChild) {
      preview.removeChild(preview.firstChild);
    }

    const curFiles = input.files;
    if (curFiles.length === 0) {
      const para = document.createElement('p');
      para.textContent = 'No files currently selected for upload';
      preview.appendChild(para);
    } else {
      const list = document.createElement('ul');
      preview.appendChild(list);

      for (const file of curFiles) {
        const listItem = document.createElement('li');
        const para = document.createElement('p');

        if (validFileType(file)) {
          para.textContent = `File name ${file.name}, file size ${returnFileSize(file.size)}.`;
          const image = document.createElement('img');
          image.src = URL.createObjectURL(file);

          listItem.appendChild(image);
          listItem.appendChild(para);
        } else {
          para.textContent = `File name ${file.name}: Not a valid file type. Update your selection.`;
          listItem.appendChild(para);
        }

        list.appendChild(listItem);
      }
    }
  }

  // https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types
  const fileTypes = [
    'image/apng',
    'image/bmp',
    'image/gif',
    'image/jpeg',
    'image/pjpeg',
    'image/png',
    'image/svg+xml',
    'image/tiff',
    'image/webp',
    `image/x-icon`
  ];

  function validFileType(file) {
    return fileTypes.includes(file.type);
  }

  function returnFileSize(number) {
    if (number < 1024) {
      return number + 'bytes';
    } else if (number > 1024 && number < 1048576) {
      return (number / 1024).toFixed(1) + 'KB';
    } else if (number > 1048576) {
      return (number / 1048576).toFixed(1) + 'MB';
    }
  }
</script>
